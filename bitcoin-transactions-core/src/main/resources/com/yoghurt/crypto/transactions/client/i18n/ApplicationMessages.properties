
browserTitle = Blockchain Reader
subTitle = Simple, pure, open
applicationVersion = v0.4 - Delta - November 2017 
applicationLookupFieldPlaceHolder = Insert anything, press enter 
applicationContributionText = Donate / contribute 
startupGeneral = General navigation 
startupLastBlock = Last block
getMemPoolBlock = Get Mem Pool Block
addressPlaceTitle = Address
addressPlaceBase58CheckTitle = BASE58CHECK breakdown
addressPlaceFinance = Finance
addressPlaceQRCode = QR Code
addressHash160 = Hash160:
addressChecksum = Checksum:
addressVersion = Version:
addressAddress = Address:
addressAddressHex = Address (hex):
addressValidFormat = Well formed:
addressMalformedText = WARNING: This address is malformed. Details below.
addressAdvertisedChecksum = Embedded checksum:
addressComputedChecksum = Computed checksum: 
addressMalformedWarning = Do not send money to this address! Check for typos!
addressOutpointSpent = Spent:
addressNumberOfTransactions = # transactions:
addressBalance = Balance:
transactionPlaceTitle =  Transaction 
transactionPlaceTitleInformation = Transaction hash
transactionPlaceTitleContext = Transaction information 
transactionPlaceTitleExtraInformation = Presence in blockchain 
transactionPlaceTitleTransactionInputs = Transaction inputs 
transactionPlaceTitleTransactionOutputs = Transaction outputs 
transactionPlaceTitleMiscellaneousInformation = Miscellaneous information 
transactionPlaceTitleError = Error 
transactionPlaceTitleRawHex = Raw transaction in hex 
transactionPlaceParseError = An error occurred while parsing the transaction, what you are seeing below is the best we could make out of the data before we stopped understanding it.

transactionWeight = Weight (byte):
transactionWeightContext = Transaction weight is defined as Base transaction size * 3 + Total transaction size
transactionVSize = Virtual size (byte):
transactionVSizeContext = Virtual transaction size is defined as Transaction weight / 4 (rounded up to the next integer).
transactionBaseSize = Base size (byte):
transactionBaseSizeContext = Base transaction size is the size of the transaction serialised with the witness data stripped.
transactionTotalSize = Total size (byte):
transactionTotalSizeContext = Total transaction size is the transaction size in bytes serialized as described in BIP144, including base data and witness data.

blockPlaceTitle = Block 
blockPlaceTitleInformation = Block hash 
blockPlaceTitleCoinbase = Coinbase transaction hash 
blockPlaceTitleExtraInformation = Presence in blockchain 
blockPlaceTitleBlockHeaders = Block headers 
blockPlaceTitleRawBlockHex = Raw block headers in hex 
blockPlaceTitleRawCoinbaseHex = Raw coinbase transaction in hex 
blockPlaceTitleTransactionList = Transaction list 
minePlaceTitleMiningSimulator = Mining simulator 
minePlaceTitleModifyHeaders = Modify Headers 
minePlaceTitleMineHeaders = Raw headers in hex 
minePlaceTitleCoinbase = Coinbase transaction 
minePlaceTitleBlockHash = Computed block hash 
minePlaceTitleBlockHeaders = Block headers 
transactionId = Transaction ID:
transactionIdContext = Transaction hash
witnessIdContext = Witness hash
transactionPreviousTransactionId = Previous tx: 
transactionOutpointIndex = Index: 
transactionScriptSig = ScriptSig: 
transactionScriptPubKey = ScriptPubKey: 
transactionCoinbaseInput = ASCII interpret: 
transactionSegwitEnabled = Segregated witness enabled:
transactionScriptViewer = View in script viewer 
transactionSequence = Sequence: 
transactionAmount = Amount: 
transactionState = State: 
transactionTime = Time: 
transactionVersion = Format version: 
transactionLockTime = Lock time: 
transactionOutputAddress = Derived address:
transactionPlaceBlockchainExistenceLoading = Checking existence in the blockchain ... 
transactionPlaceBlockchainExistenceNotFound = This transaction does not exist in the blockchain and could not be found in the unconfirmed transaction pool. 
blockHeight = Block height: 
blockHash = Block hash: 
blockConfirmations = Confirmations: 
blockVersion = Version: 
blockPreviousBlock = Prev block: 
blockMerkleRoot = Merkle root: 
blockTime = Timestamp 
blockBits = Bits:
blockBitsTargetExplain = The block hash must be equal to or below this number, the 'target', in order to be valid.
blockNonce = Nonce: 
blockDepth = Block depth: 
blockNumTransactions = # transactions: 
blockNextBlock = Next block: 
blockWeight = Weight (kb):
blockWeightContext = Block weight is defined as Base size * 3 + Total size.
blockVirtualSize = Virtual size (kb): 
blockVirtualSizeContext = Virtual size is what the block size could be interpreted as under the pre-segwit rules. Commonly referred to as 'the effective block size' in those days.
blockBaseSize = Base size (kb):
blockBaseSizeContext = Base size is the block size in bytes with the original transaction serialization without any witness-related data, as seen by a non-upgraded node.
blockTotalSize = Total size (kb):
blockTotalSizeContext = Total size is the block size in bytes with transactions serialized as described in BIP144, including base data and witness data.
blockPlaceBlockchainExistenceLoading = Checking existence in the blockchain ... 
blockPlaceBlockchainExistenceNotFound = This block could not be found in the blockchain. 
scriptPlaceTitleScriptViewer = Script viewer 
scriptPlaceTitleOutpointViewer = Outpoint information 
scriptPlaceOutpointHash = Tx hash: 
scriptPlaceTitleScripts = Scripts 
scriptPlaceExecutionResult = Final execution result
scriptPlaceExecutionResultSuccess = No failures have been triggered during the execution of this script, and the top stack item is true (non-zero). This transaction output can be spent given these inputs. Please note: This rudimentary script interpreter does not run segwit (BIP141) or P2SH (BIP16) scripts, and so this result may not be representative of reality.
scriptPlaceExecutionResultFailureTriggered = A failure has been triggered during the execution of this script. This transaction output cannot be spent given these inputs.
scriptPlaceExecutionResultFailureResult = No failures have been triggered during the execution of this script, but the result on the stack is zero or empty. This transaction output cannot be spent given these inputs.
scriptPlaceFullScript = Full script:
scriptPlaceScriptSigRawHex = ScriptSig in raw hex 
scriptPlaceScriptPubKeyRawHex =  ScriptPubKey in raw hex
scriptPlaceStepByStep = Script execution, step-by-step 
scriptOperation = Instruction: 
scriptOperationDescriptionLabel = Description: 
scriptResult = Result: 
scriptRemainingScript = Left-over script: 
scriptResultStack = Resulting stack: 
scriptExecutionStep = Execution step {0}
configPlaceTitle = Configuration 
configPlaceCreatePasswordText = You haven''t set up a password for the application yet. Please insert a password and remember it, you''ll need it for any subsequent modifications to the configuration (although you''d typically only configure it once).<br><br>If you''ve forgotten your password you''ll need to reset (remove) it manually, its hash is stored in the file ''yoghurt.conf''.<br/><br/>The server will never store your plain-text password, it will be hashed on the client and then sent in clear text over the wire. 
configPasswordPlaceHolder = Password 
configPasswordRepeatPlaceHolder = Password confirmation 
configPasswordConfirm = Set password 
configPasswordLogin = Log in. 
configPlaceInputPasswordText = Insert your password. 
configBlockchainHook = Connector: 
configSubmitSettings = Save settings 
configMiscellaneousSettingsTitle = General settings 
configBlockchainHookTitle = Blockchain source settings 
configConnectorOption = Unknown (not supported)
configConnectorOption[NODE] = Bitcoin Core Node
configNodeHost = Host (probably localhost) 
configNodePort = Port (probably 8332) 
configNodeRpcUser = RPC Username 
configNodeRpcPass = RPC Password 
configTitlePlaceHolder = Application title 
configSubTitlePlaceHolder = Application subtitle 
configContributeAddressPlaceHolder = Donation address 
configTitles = Application texts 
configContribution = Node contribution

contribute = Contribute
contributePlaceTitle = Contribute to this project
contributePlaceText = <p>This project features an open-source block explorer anyone can run on top of a full node. It is free software built by volunteers, for enthusiasts.<p><p>Contributions to this project would be greatly appreciated, but any help with further development or independent hosting even more.</p><p>The GitHub repository for this project can be found <a href="https://github.com/JornC/bitcoin-transaction-explorer">here</a>, if you can help out with coding, testing or whatever else comes to mind, be sure to send a message on GitHub.</p><p>Donations for the project can be done on the following address: {0}</p> 
contributePlaceNodeTitle = Donate to this node
contributePlaceNodeText = <p>Donation address for this node: {0}</p>

jsonPlaceTitle = JSON Response

#Script operations 
scriptOperationDescription = Operation unknown

scriptOperationDescription[OP_FALSE] = An empty array of bytes is pushed onto the stack.
scriptOperationDescription[OP_PUSHDATA] = Data to be pushed onto the stack 
scriptOperationDescription[OP_PUSHDATA1] = The next byte contains the number of bytes to be pushed onto the stack
scriptOperationDescription[OP_PUSHDATA2] = The next two bytes contain the number of bytes to be pushed onto the stack.
scriptOperationDescription[OP_PUSHDATA4] = The next four bytes contain the number of bytes to be pushed onto the stack.
scriptOperationDescription[OP_1NEGATE] = The number -1 is pushed onto the stack.
scriptOperationDescription[OP_TRUE] = The number 1 is pushed onto the stack.
scriptOperationDescription[OP_2] = The number 2 is pushed onto the stack.
scriptOperationDescription[OP_3] = The number 3 is pushed onto the stack. 
scriptOperationDescription[OP_4] = The number 4 is pushed onto the stack. 
scriptOperationDescription[OP_5] = The number 5 is pushed onto the stack. 
scriptOperationDescription[OP_6] = The number 6 is pushed onto the stack. 
scriptOperationDescription[OP_7] = The number 7 is pushed onto the stack. 
scriptOperationDescription[OP_8] = The number 8 is pushed onto the stack. 
scriptOperationDescription[OP_9] = The number 9 is pushed onto the stack. 
scriptOperationDescription[OP_10] = The number 10 is pushed onto the stack. 
scriptOperationDescription[OP_11] = The number 11 is pushed onto the stack. 
scriptOperationDescription[OP_12] = The number 12 is pushed onto the stack. 
scriptOperationDescription[OP_13] = The number 13 is pushed onto the stack. 
scriptOperationDescription[OP_14] = The number 14 is pushed onto the stack. 
scriptOperationDescription[OP_15] = The number 15 is pushed onto the stack. 
scriptOperationDescription[OP_16] = The number 16 is pushed onto the stack. 

# Flow control
scriptOperationDescription[OP_NOP] = Does nothing
scriptOperationDescription[OP_IF] = If the top stack value is not , the statements are executed. The top stack value is removed.
scriptOperationDescription[OP_NOTIF] = If the top stack value is 0, the statements are executed. The top stack value is removed.
scriptOperationDescription[OP_ELSE] = If the preceding OP_IF or OP_NOTIF or OP_ELSE was not executed then these statements are and if the preceding OP_IF or OP_NOTIF or OP_ELSE was executed then these statements are not.
scriptOperationDescription[OP_ENDIF] = Ends an if/else block. All blocks must end, or the transaction is invalid. An OP_ENDIF without OP_IF earlier is also invalid.
scriptOperationDescription[OP_VERIFY] = Marks transaction as invalid if top stack value is not true.
scriptOperationDescription[OP_RETURN] = Marks transaction as invalid.

# Stack
scriptOperationDescription[OP_TOALTSTACK] = Puts the top stack item onto the top of the alt stack. Removes it from the main stack.
scriptOperationDescription[OP_FROMALTSTACK] = Puts the top stack item onto the top of the main stack. Removes it from the alt stack.
scriptOperationDescription[OP_IFDUP] = If the top stack value is not 0, duplicate it.
scriptOperationDescription[OP_DEPTH] = Puts the number of stack items onto the stack.
scriptOperationDescription[OP_DROP] = Removes the top stack item.
scriptOperationDescription[OP_DUP] = Duplicates the top stack item.
scriptOperationDescription[OP_NIP] = Removes the second-to-top stack item.
scriptOperationDescription[OP_OVER] = Copies the second-to-top stack item to the top.
scriptOperationDescription[OP_PICK] = The item n back in the stack is copied to the top.
scriptOperationDescription[OP_ROLL] = The item n back in the stack is moved to the top.
scriptOperationDescription[OP_ROT] = The top three items on the stack are rotated to the left.
scriptOperationDescription[OP_SWAP] = The top two items on the stack are swapped.
scriptOperationDescription[OP_TUCK] = The item at the top of the stack is copied and inserted before the second-to-top item.
scriptOperationDescription[OP_2DROP] = Removes the top two stack items.
scriptOperationDescription[OP_2DUP] = Duplicates the top two stack items.
scriptOperationDescription[OP_3DUP] = Duplicates the top three stack items.
scriptOperationDescription[OP_2OVER] = Copies the pair of items two spaces back in the stack to the front.
scriptOperationDescription[OP_2ROT] = The fifth and sixth items back are moved to the top of the stack.
scriptOperationDescription[OP_2SWAP] = Swaps the top two pairs of items.

# Splice
scriptOperationDescription[OP_CAT] = Concatenates two strings. disabled.
scriptOperationDescription[OP_SUBSTR] = Returns a section of a string. disabled.
scriptOperationDescription[OP_LEFT] = Keeps only characters left of the specified point in a string. disabled.
scriptOperationDescription[OP_RIGHT] = Keeps only characters right of the specified point in a string. disabled.
scriptOperationDescription[OP_SIZE] = Pushes the string length of the top element of the stack (without popping it).

# Bitwise logic
scriptOperationDescription[OP_INVERT] = Flips all of the bits in the input. disabled.
scriptOperationDescription[OP_AND] = Boolean and between each bit in the inputs. disabled.
scriptOperationDescription[OP_OR] = Boolean or between each bit in the inputs. disabled.
scriptOperationDescription[OP_XOR] = Boolean exclusive or between each bit in the inputs. disabled.
scriptOperationDescription[OP_EQUAL] = Returns 1 if the inputs are exactly equal, 0 otherwise.
scriptOperationDescription[OP_EQUALVERIFY] = Returns 1 if the inputs are exactly equal, 0 otherwise. Runs OP_VERIFY afterward. (OP_VERIFY: Marks transaction as invalid if top stack value is not true.)

# Arithmetic
scriptOperationDescription[OP_1ADD] = 1 is added to the input.
scriptOperationDescription[OP_1SUB] = 1 is subtracted from the input.
scriptOperationDescription[OP_2MUL] = The input is multiplied by 2. disabled.
scriptOperationDescription[OP_2DIV] = The input is divided by 2. disabled.
scriptOperationDescription[OP_NEGATE] = The sign of the input is flipped.
scriptOperationDescription[OP_ABS] = The input is made positive.
scriptOperationDescription[OP_NOT] = If the input is 0 or 1, it is flipped. Otherwise the output will be 0.
scriptOperationDescription[OP_0NOTEQUAL] = Returns 0 if the input is 0. 1 otherwise.
scriptOperationDescription[OP_ADD] = a is added to b.
scriptOperationDescription[OP_SUB] = b is subtracted from a.
scriptOperationDescription[OP_MUL] = a is multiplied by b. disabled.
scriptOperationDescription[OP_DIV] = a is divided by b. disabled.
scriptOperationDescription[OP_MOD] = Returns the remainder after dividing a by b. disabled.
scriptOperationDescription[OP_LSHIFT] = Shifts a left b bits, preserving sign. disabled.
scriptOperationDescription[OP_RSHIFT] = Shifts a right b bits, preserving sign. disabled.
scriptOperationDescription[OP_BOOLAND] = If both a and b are not 0, the output is 1. Otherwise 0.
scriptOperationDescription[OP_BOOLOR] = If a or b is not 0, the output is 1. Otherwise 0.
scriptOperationDescription[OP_NUMEQUAL] = Returns 1 if the numbers are equal, 0 otherwise.
scriptOperationDescription[OP_NUMEQUALVERIFY] = Same as OP_NUMEQUAL, but runs OP_VERIFY afterward.
scriptOperationDescription[OP_NUMNOTEQUAL] = Returns 1 if the numbers are not equal, 0 otherwise.
scriptOperationDescription[OP_LESSTHAN] = Returns 1 if a is less than b, 0 otherwise.
scriptOperationDescription[OP_GREATERTHAN] = Returns 1 if a is greater than b, 0 otherwise.
scriptOperationDescription[OP_LESSTHANOREQUAL] = Returns 1 if a is less than or equal to b, 0 otherwise.
scriptOperationDescription[OP_GREATERTHANOREQUAL] = Returns 1 if a is greater than or equal to b, 0 otherwise.
scriptOperationDescription[OP_MIN] = Returns the smaller of a and b.
scriptOperationDescription[OP_MAX] = Returns the larger of a and b.
scriptOperationDescription[OP_WITHIN] = Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.

# Crypto
scriptOperationDescription[OP_RIPEMD160] = The top stack item is hashed using RIPEMD-160.
scriptOperationDescription[OP_SHA1] = The top stack item is hashed using SHA-1.
scriptOperationDescription[OP_SHA256] = The top stack item is hashed using SHA-256.
scriptOperationDescription[OP_HASH160] = The top stack item is hashed twice: first with SHA-256 and then with RIPEMD-160.
scriptOperationDescription[OP_HASH256] = The top stack item is hashed two times with SHA-256.
scriptOperationDescription[OP_CODESEPARATOR] = All of the signature checking words will only match signatures to the data after the most recently-executed OP_CODESEPARATOR.
scriptOperationDescription[OP_CHECKSIG] = The entire transaction''s outputs, inputs, and script (from the most recently-executed OP_CODESEPARATOR to the end) are hashed. The signature used by OP_CHECKSIG must be a valid signature for this hash and public key. If it is, 1 is returned, 0 otherwise.
scriptOperationDescription[OP_CHECKSIGVERIFY] = The entire transaction''s outputs, inputs, and script (from the most recently-executed OP_CODESEPARATOR to the end) are hashed. The signature used by OP_CHECKSIG must be a valid signature for this hash and public key. If it is, 1 is returned, 0 otherwise. Runs OP_VERIFY afterward (OP_VERIFY: Marks transaction as invalid if top stack value is not true.) 
scriptOperationDescription[OP_CHECKMULTISIG] = Compares the first signature against each public key until it finds an ECDSA match. Starting with the subsequent public key, it compares the second signature against each remaining public key until it finds an ECDSA match. The process is repeated until all signatures have been checked or not enough public keys remain to produce a successful result. All signatures need to match a public key. Because public keys are not checked again if they fail any signature comparison, signatures must be placed in the scriptSig using the same order as their corresponding public keys were placed in the scriptPubKey or redeemScript. If all signatures are valid, 1 is returned, 0 otherwise. Due to a bug, one extra unused value is removed from the stack.
scriptOperationDescription[OP_CHECKMULTISIGVERIFY] = Same as OP_CHECKMULTISIG, but OP_VERIFY is executed afterward.

# Pseudo words
scriptOperationDescription[OP_PUBKEYHASH] = Represents a public key hashed with OP_HASH160.
scriptOperationDescription[OP_PUBKEY] = Represents a public key compatible with OP_CHECKSIG.
scriptOperationDescription[OP_INVALIDOPCODE] = Matches any opcode that is not yet assigned.

# Reserved words
scriptOperationDescription[OP_RESERVED] = Transaction is invalid unless occurring in an unexecuted OP_IF branch
scriptOperationDescription[OP_VER] = Transaction is invalid unless occurring in an unexecuted OP_IF branch
scriptOperationDescription[OP_VERIF] = Transaction is invalid even when occurring in an unexecuted OP_IF branch
scriptOperationDescription[OP_VERNOTIF] = Transaction is invalid even when occurring in an unexecuted OP_IF branch
scriptOperationDescription[OP_RESERVED1] = Transaction is invalid unless occurring in an unexecuted OP_IF branch
scriptOperationDescription[OP_RESERVED2] = Transaction is invalid unless occurring in an unexecuted OP_IF branch
scriptOperationDescription[OP_NOP1] = The word is ignored. Does not mark transaction as invalid.
scriptOperationDescription[OP_NOP2] = The word is ignored. Does not mark transaction as invalid.
scriptOperationDescription[OP_NOP3] = The word is ignored. Does not mark transaction as invalid.
scriptOperationDescription[OP_NOP4] = The word is ignored. Does not mark transaction as invalid.
scriptOperationDescription[OP_NOP5] = The word is ignored. Does not mark transaction as invalid.
scriptOperationDescription[OP_NOP6] = The word is ignored. Does not mark transaction as invalid.
scriptOperationDescription[OP_NOP7] = The word is ignored. Does not mark transaction as invalid.
scriptOperationDescription[OP_NOP8] = The word is ignored. Does not mark transaction as invalid.
scriptOperationDescription[OP_NOP9] = The word is ignored. Does not mark transaction as invalid.
scriptOperationDescription[OP_NOP10] = The word is ignored. Does not mark transaction as invalid.

scriptOperationDescription[ERROR] = Non-parseable script bytes. 
